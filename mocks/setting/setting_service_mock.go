// Code generated by MockGen. DO NOT EDIT.
// Source: services/setting/s_setting.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	setting "go-template/controllers/setting"
	setting0 "go-template/entities/setting"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockSettingRepo is a mock of SettingRepo interface.
type MockSettingRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSettingRepoMockRecorder
}

// MockSettingRepoMockRecorder is the mock recorder for MockSettingRepo.
type MockSettingRepoMockRecorder struct {
	mock *MockSettingRepo
}

// NewMockSettingRepo creates a new mock instance.
func NewMockSettingRepo(ctrl *gomock.Controller) *MockSettingRepo {
	mock := &MockSettingRepo{ctrl: ctrl}
	mock.recorder = &MockSettingRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingRepo) EXPECT() *MockSettingRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSettingRepo) Create(ctx context.Context, tx *sqlx.Tx, data *setting0.Setting) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSettingRepoMockRecorder) Create(ctx, tx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSettingRepo)(nil).Create), ctx, tx, data)
}

// CreateTx mocks base method.
func (m *MockSettingRepo) CreateTx(ctx context.Context) (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", ctx)
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockSettingRepoMockRecorder) CreateTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockSettingRepo)(nil).CreateTx), ctx)
}

// Delete mocks base method.
func (m *MockSettingRepo) Delete(ctx context.Context, tx *sqlx.Tx, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSettingRepoMockRecorder) Delete(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSettingRepo)(nil).Delete), ctx, tx, id)
}

// FindAll mocks base method.
func (m *MockSettingRepo) FindAll(ctx context.Context, parameters *setting.SettingParameter) ([]setting0.Setting, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, parameters)
	ret0, _ := ret[0].([]setting0.Setting)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockSettingRepoMockRecorder) FindAll(ctx, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockSettingRepo)(nil).FindAll), ctx, parameters)
}

// FindOne mocks base method.
func (m *MockSettingRepo) FindOne(ctx context.Context, parameters *setting.SettingParameter) (setting0.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, parameters)
	ret0, _ := ret[0].(setting0.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockSettingRepoMockRecorder) FindOne(ctx, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockSettingRepo)(nil).FindOne), ctx, parameters)
}

// SelectAll mocks base method.
func (m *MockSettingRepo) SelectAll(ctx context.Context, parameters *setting.SettingParameter) ([]setting0.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll", ctx, parameters)
	ret0, _ := ret[0].([]setting0.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockSettingRepoMockRecorder) SelectAll(ctx, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockSettingRepo)(nil).SelectAll), ctx, parameters)
}

// Update mocks base method.
func (m *MockSettingRepo) Update(ctx context.Context, tx *sqlx.Tx, data *setting0.Setting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSettingRepoMockRecorder) Update(ctx, tx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSettingRepo)(nil).Update), ctx, tx, data)
}
