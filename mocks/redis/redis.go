// Code generated by MockGen. DO NOT EDIT.
// Source: client/redis/redis.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIRedis is a mock of IRedis interface.
type MockIRedis struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisMockRecorder
}

// MockIRedisMockRecorder is the mock recorder for MockIRedis.
type MockIRedisMockRecorder struct {
	mock *MockIRedis
}

// NewMockIRedis creates a new mock instance.
func NewMockIRedis(ctrl *gomock.Controller) *MockIRedis {
	mock := &MockIRedis{ctrl: ctrl}
	mock.recorder = &MockIRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedis) EXPECT() *MockIRedisMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockIRedis) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockIRedisMockRecorder) Del(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockIRedis)(nil).Del), ctx, key)
}

// DelBulk mocks base method.
func (m *MockIRedis) DelBulk(ctx context.Context, prefix string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelBulk", ctx, prefix)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelBulk indicates an expected call of DelBulk.
func (mr *MockIRedisMockRecorder) DelBulk(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelBulk", reflect.TypeOf((*MockIRedis)(nil).DelBulk), ctx, prefix)
}

// Get mocks base method.
func (m *MockIRedis) Get(ctx context.Context, key string, dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIRedisMockRecorder) Get(ctx, key, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRedis)(nil).Get), ctx, key, dest)
}

// GetString mocks base method.
func (m *MockIRedis) GetString(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetString indicates an expected call of GetString.
func (mr *MockIRedisMockRecorder) GetString(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockIRedis)(nil).GetString), ctx, key)
}

// HashDel mocks base method.
func (m *MockIRedis) HashDel(ctx context.Context, hashName string, fields ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, hashName}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HashDel", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashDel indicates an expected call of HashDel.
func (mr *MockIRedisMockRecorder) HashDel(ctx, hashName interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, hashName}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashDel", reflect.TypeOf((*MockIRedis)(nil).HashDel), varargs...)
}

// HashGet mocks base method.
func (m *MockIRedis) HashGet(ctx context.Context, hashName, field string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashGet", ctx, hashName, field)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashGet indicates an expected call of HashGet.
func (mr *MockIRedisMockRecorder) HashGet(ctx, hashName, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashGet", reflect.TypeOf((*MockIRedis)(nil).HashGet), ctx, hashName, field)
}

// HashSet mocks base method.
func (m *MockIRedis) HashSet(ctx context.Context, hashName string, value ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, hashName}
	for _, a := range value {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HashSet", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashSet indicates an expected call of HashSet.
func (mr *MockIRedisMockRecorder) HashSet(ctx, hashName interface{}, value ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, hashName}, value...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashSet", reflect.TypeOf((*MockIRedis)(nil).HashSet), varargs...)
}

// Incr mocks base method.
func (m *MockIRedis) Incr(ctx context.Context, key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", ctx, key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr.
func (mr *MockIRedisMockRecorder) Incr(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockIRedis)(nil).Incr), ctx, key)
}

// Lock mocks base method.
func (m *MockIRedis) Lock(ctx context.Context, key, identifier string, expiration time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", ctx, key, identifier, expiration)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockIRedisMockRecorder) Lock(ctx, key, identifier, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockIRedis)(nil).Lock), ctx, key, identifier, expiration)
}

// Set mocks base method.
func (m *MockIRedis) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIRedisMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIRedis)(nil).Set), ctx, key, value, expiration)
}

// SetIfNotExist mocks base method.
func (m *MockIRedis) SetIfNotExist(ctx context.Context, key string, value interface{}, expiration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIfNotExist", ctx, key, value, expiration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetIfNotExist indicates an expected call of SetIfNotExist.
func (mr *MockIRedisMockRecorder) SetIfNotExist(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIfNotExist", reflect.TypeOf((*MockIRedis)(nil).SetIfNotExist), ctx, key, value, expiration)
}

// Unlock mocks base method.
func (m *MockIRedis) Unlock(ctx context.Context, key, identifier string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock", ctx, key, identifier)
}

// Unlock indicates an expected call of Unlock.
func (mr *MockIRedisMockRecorder) Unlock(ctx, key, identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockIRedis)(nil).Unlock), ctx, key, identifier)
}
